Copyright 2015 by Elliot Wolk
This project is free software, released under the GPLv3

smtp-cli Copyright Michal Ludvig 2003-2014
smtp-cli is free software, released under the GPLv3
  small changes to smtp-cli Copyright 2015 Elliot Wolk

Simple IMAP client with a QT gui and a CLI
Minimal dependencies, currently minimal features

icons:
  Blue Magic
    by RevZAP
    https://www.iconfinder.com/iconsets/blue-magic
  WooCons #1
    by Janik Baumgartner
    http://www.woothemes.com/2010/08/woocons1
  Knob Buttons Toolbar icons
    by iTweek
    http://itweek.deviantart.com/art/Knob-Buttons-Toolbar-icons-73463960
  Diagram
    by Double-J designs
    https://www.iconfinder.com/iconsets/diagram

FILES
  src/email-gui.py
    simple python QT gui (pyside+QML)
      essentially a wrapper around email.pl
    should work anywhere QT/python/perl work with little effort
    explicitly supported platforms:
      Meego Harmattan
      Debian GNU/Linux
    QML is located in /opt/email-gui/

  src/email.pl
    simple command line IMAP client
    caches all headers, and caches unread bodies
    e.g.:
      > echo "configure $HOME/.secrets first"
        configure /home/wolke/.secrets and run 'email.pl'
      >
      > email.pl
      GMail: logging in
      fetching all message ids
      fetched 15906 ids
      caching headers for 15906 messages
      caching bodies for 1 messages
      >
      > email.pl --summary
      GMail 2015-01-20 11:10:01 "Naked Girls Reading NYC" <ngrnyc@gmail.com>
        Join us tomorrow night for SCIENCE!
      >
      > email.pl --print
      ACCOUNT: GMail
      UID: 35870
      DATE: Tue, 20 Jan 2015 11:10:01 -0500
      FROM: "Naked Girls Reading NYC" <ngrnyc@gmail.com>
      SUBJECT: Join us tomorrow night for SCIENCE!
      BODY:
        This November, the Naked Girls give it all away
        as Naked Girls Reading presents SPOILER ALERT!
        Join the hit nude literary salon for an evening...
      >
      > email.pl --unread-line && echo
      G1
      > email.pl --body G 35870 | grep -o '<div>' | wc -l
      0
      > email.pl --body-html G 35870 | grep -o '<div>' | wc -l
      12

  src/smtp-cli
    SMTP command line client, written by Michal Ludvig
    https://github.com/mludvig/smtp-cli

  ~/.secrets
    Account config goes here. See "Usage" below.


Dependencies:
  perl
  perl modules:
    Mail::IMAPClient
    IO::Socket::SSL
    MIME::Parser
    Date::Parse
    Date::Format
    MIME::Lite
  python
  pyside
  qt
  qtquick 1.1


Usage:

  Simple IMAP client. {--smtp command is a convenience wrapper around smtp-cli}
  Configuration is in ~/.secrets
    Each line is one key of the format: email.ACCOUNT_NAME.FIELD = value
    Account names can be any word characters (alphanumeric plus underscore)
    Other keys are ignored.
    required fields:
      user     {Required} IMAP username, usually the full email address
      password {Required} *password in plaintext*
      server   {Required} IMAP server
      port     {Required} IMAP server port
      ssl      {Optional} false to forcibly disable security
      inbox    {Optional} main IMAP folder name to use (default is "INBOX")
      sent     {Optional} IMAP folder name to use for sent mail
      folders  {Optional} colon-separated list of additional folders to fetch
        each folder has a FOLDER_NAME,
        which is the directory on the filesystem will be lowercase
        FOLDER_NAME is the folder, with all non-alphanumeric characters
          replaced with _s, and all leading and trailing _s removed
        e.g.:  junk:[GMail]/Drafts:_12_/ponies
               =>  ["junk", "gmail_drafts", "12_ponies"]

  ACCOUNT_NAME    the word following "email." in ~/.secrets
  FOLDER_NAME     "inbox", "sent" or one of the names from "folders"
  UID             an IMAP UID {UIDVALIDITY is assumed to never change}

  /usr/bin/email.pl -h|--help
    show this message

  /usr/bin/email.pl [--update] [--folder=FOLDER_NAME_FILTER] [ACCOUNT_NAME ACCOUNT_NAME ...]
    -for each account specified {or all non-skipped accounts if none are specified}:
      -login to IMAP server, or create file ~/.cache/email/ACCOUNT_NAME/error
      -for each FOLDER_NAME {or just FOLDER_NAME_FILTER if specified}:
        -fetch and write all message UIDs to
          ~/.cache/email/ACCOUNT_NAME/FOLDER_NAME/all
        -fetch and cache all message headers in
          ~/.cache/email/ACCOUNT_NAME/FOLDER_NAME/headers/UID
        -fetch all unread messages and write their UIDs to
          ~/.cache/email/ACCOUNT_NAME/FOLDER_NAME/unread
        -write all message UIDs that are now in unread and were not before
          ~/.cache/email/ACCOUNT_NAME/FOLDER_NAME/new-unread
    -update global unread counts file ~/.cache/email/unread-counts
      ignored or missing accounts are preserved in ~/.cache/email/unread-counts

      write the unread counts, one line per account, to ~/.cache/email/unread-counts
      e.g.: 3:AOL
            6:GMAIL
            0:WORK_GMAIL

  /usr/bin/email.pl --smtp ACCOUNT_NAME SUBJECT BODY TO [ARG ARG ..]
    simple wrapper around smtp-cli. {you can add extra recipients with --to}
    calls:
      /opt/qtemail/bin/smtp-cli \
        --server=<smtp_server> --port=<smtp_port> \
        --user=<user> --pass=<password> \
        --from=<user> \
        --subject=SUBJECT --body-plain=BODY \
        --to=TO \
        ARG ARG ..

  /usr/bin/email.pl --mark-read [--folder=FOLDER_NAME] ACCOUNT_NAME UID [UID UID ...]
    login and mark the indicated message(s) as read

  /usr/bin/email.pl --mark-unread [--folder=FOLDER_NAME] ACCOUNT_NAME UID [UID UID ...]
    login mark the indicated message(s) as unread

  /usr/bin/email.pl --accounts
    format and print information about each account
    "ACCOUNT_NAME:<timestamp>:<relative_time>:<unread_count>/<total_count>:<error>"

  /usr/bin/email.pl --folders ACCOUNT_NAME
    format and print information about each folder for the given account
    "FOLDER_NAME:<unread_count>/<total_count>"

  /usr/bin/email.pl --header [--folder=FOLDER_NAME] ACCOUNT_NAME UID [UID UID ...]
    format and print the header of the indicated message(s)
    prints each of [Date Subject From To]
      one per line, formatted "UID.FIELD: VALUE"

  /usr/bin/email.pl --body [--folder=FOLDER_NAME] ACCOUNT_NAME UID [UID UID ...]
    download, format and print the body of the indicated message(s)
    if body is cached, skip download

  /usr/bin/email.pl --body-html [--folder=FOLDER_NAME] ACCOUNT_NAME UID [UID UID ...]
    same as --body, but prefer HTML instead of plaintext

  /usr/bin/email.pl --attachments [--folder=FOLDER_NAME] ACCOUNT_NAME DEST_DIR UID [UID UID ...]
    download the body of the indicated message(s) and save any attachments to DEST_DIR
    if body is cached, skip download

  /usr/bin/email.pl --print [--folder=FOLDER_NAME] [ACCOUNT_NAME ACCOUNT_NAME ...]
    format and print cached unread message headers and bodies

  /usr/bin/email.pl --summary [--folder=FOLDER_NAME] [ACCOUNT_NAME ACCOUNT_NAME ...]
    format and print cached unread message headers

  /usr/bin/email.pl --status-line [ACCOUNT_NAME ACCOUNT_NAME ...]
    does not fetch anything, merely reads ~/.cache/email/unread-counts
    format and print ~/.cache/email/unread-counts
    the string is a space-separated list of the first character of
      each account name followed by the integer count
    no newline character is printed
    if the count is zero for a given account, it is omitted
    if accounts are specified, all but those are omitted
    e.g.: A3 G6

  /usr/bin/email.pl --has-error [ACCOUNT_NAME ACCOUNT_NAME ...]
    checks if ~/.cache/email/ACCOUNT_NAME/error exists
    print "yes" and exit with zero exit code if it does
    otherwise, print "no" and exit with non-zero exit code

  /usr/bin/email.pl --has-new-unread [ACCOUNT_NAME ACCOUNT_NAME ...]
    checks for any NEW unread emails, in any account
      {UIDs in ~/.cache/email/ACCOUNT_NAME/new-unread}
    if accounts are specified, all but those are ignored
    print "yes" and exit with zero exit code if there are new unread emails
    otherwise, print "no" and exit with non-zero exit code

  /usr/bin/email.pl --has-unread [ACCOUNT_NAME ACCOUNT_NAME ...]
    checks for any unread emails, in any account
      {UIDs in ~/.cache/email/ACCOUNT_NAME/unread}
    if accounts are specified, all but those are ignored
    print "yes" and exit with zero exit code if there are unread emails
    otherwise, print "no" and exit with non-zero exit code

  /usr/bin/email.pl --read-config ACCOUNT_NAME
    reads ~/.secrets
    for each line of the form "email.ACCOUNT_NAME.KEY\s*=\s*VAL"
      print KEY=VAL

  /usr/bin/email.pl --write-config ACCOUNT_NAME KEY=VAL [KEY=VAL KEY=VAL]
    modifies ~/.secrets
    for each KEY/VAL pair:
      removes any line that matches "email.ACCOUNT_NAME.KEY\s*="
      adds a line at the end "email.ACCOUNT_NAME.KEY = VAL"
