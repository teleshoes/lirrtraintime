#!/usr/bin/perl
use strict;
use warnings;

sub getScheduleText($$$$$);
sub getLatestCache($$);
sub checkInternet();
sub parseTrains($);
sub formatTrain($);
sub getStations();
sub run(@);

my $stations = getStations();

my $synonyms = {
  BTA => ["bab", "baby", "babylon", "bbn"],
  NYK => ["penn", "pen", "nyp"],
  CPG => ["cpge", "copiague"],
  FMD => ["farm", "fmdl", "fdl", "farmingdale"],
};

my $cacheDir = "$ENV{HOME}/.cache/lirr_train_time";
my $baseUrl = "http://traintime.lirr.org";
my $okStations = join '', map {  "$_ => $$stations{$_}\n"} sort keys %$stations;

my $usage = "
  Usage: $0 [OPTS] FROM TO [DATE TIME]
    fetch schedule from $baseUrl, parse it, and show it

  STATIONS:\n$okStations

  $0 --file=FILE
    use FILE instead of fetching from $baseUrl

  OPTS:
    -b|--bigtext|--qtbigtext
      show using bigtext

  DATE:
    the date, formatted as YYYYMMDD

  TIME:
    the time, formatted as HH24:MM
";

sub main(@){
  my $file;
  my $bigtext = 0;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^--file=(.+)$/){
      $file = $1;
    }elsif($arg =~ /^(-b|--bigtext|--qtbigtext)$/){
      $bigtext = 1;
    }else{
      die "$usage\nunknown option $arg\n";
    }
  }

  my ($from, $to, $date, $time);
  if(defined $file){
    die $usage if @_ != 0;
  }else{
    die $usage if @_ != 2 and @_ != 4;

    my ($fromSyn, $toSyn, $dateArg, $timeArg) = @_;
    for my $station(keys %$synonyms){
      my %syns = map {lc $_ => 1} @{$$synonyms{$station}};
      $from = $station if not defined $from and defined $syns{lc $fromSyn};
      $to = $station if not defined $to and defined $syns{lc $toSyn};
    }
    $from = uc $fromSyn if not defined $from;
    $to = uc $toSyn if not defined $to;
    die "Invalid starting station: $from\n" if not defined $$stations{$from};
    die "Invalid ending station: $to\n" if not defined $$stations{$to};
    $date = $dateArg;
    $time = $timeArg;
  }


  if($bigtext){
    my $schedule;
    my $pid = fork;
    if($pid == 0){
      system "bigtext", "-k";
      exec "bigtext", "--lineSeparator=true", "loading";
    }else{
      $schedule = getScheduleText($from, $to, $date, $time, $file);
      waitpid $pid, 0;
    }

    system "bigtext", $schedule;
  }else{
    my $schedule = getScheduleText $from, $to, $date, $time, $file;
    my $sep = "\n" . ("-"x30) . "\n";
    print $sep . $schedule . $sep;
  }
}

sub getScheduleText($$$$$){
  my ($from, $to, $date, $time, $file) = @_;

  my ($y, $m, $d, $hr, $min, $ampm);

  if(defined $date or defined $time){
    if($date !~ /^(\d{4})(\d{2})(\d{2})$/){
      die "Invalid date: $date\n";
    }
    ($y, $m, $d) = ($1, $2, $3);

    if($time !~ /^(\d{2}):(\d{2})$/){
      die "Invalid time: $time\n";
    }
    ($hr, $min) = ($1, $2);
    die "Invalid time: $time\n" if $hr >= 24 or $min >= 60;

    if($hr >= 12){
      $ampm = "PM";
      $hr -= 12;
      $hr = "0$hr" if $hr < 10;
    }else{
      $ampm = "AM";
    }
    $hr = "12" if $hr == 0;
  }

  my $fileName;
  my $isCached = 0;
  if(defined $file){
    $fileName = $file;
  }else{
    my $url = "$baseUrl/traintime.php?startsta=$from&endsta=$to";
    $url .= "\&RequestDate=$m\%2F$d\%2F$y" if defined $date;
    $url .= "\&RequestTime=$hr\%3A$min\&RequestAMPM=$ampm" if defined $time;

    run "mkdir", "-p", $cacheDir;

    if(checkInternet()){
      $fileName = "$cacheDir/${from}_${to}_" . time . ".html";
      run "wget", $url, "-O", $fileName;
    }else{
      $fileName = getLatestCache($from, $to);
      $isCached = 1;
    }
  }

  my $schedule;
  if(defined $fileName and -f $fileName){
    my $html = `cat $fileName`;
    my @trains = parseTrains($html);

    $schedule = join "\n", (map {formatTrain($_)} @trains);
    if($schedule eq "" and $html =~ /no.*trains.*scheduled/i){
      $schedule = "no trains";
    }elsif($schedule eq ""){
      $schedule = "error";
    }

    if($isCached){
      my $then = $1 if $fileName =~ /${from}_${to}_(\d+)\.html$/;
      my $thenFmt = `date --date=\@$then '+%F %I:%M:%S %p'`;
      chomp $thenFmt;
      $schedule = "as of $thenFmt\n\n$schedule";
    }
  }else{
    $schedule = "FAILURE: could not check schedule";
  }

  return $schedule;
}

sub getLatestCache($$){
  my ($from, $to) = @_;
  my @caches = `ls $cacheDir/${from}_${to}_*.html 2>/dev/null`;
  my $latest = undef;
  my $latestCache = undef;
  for my $cache(@caches){
    chomp $cache;
    if($cache =~ /${from}_${to}_(\d+)\.html$/){
      my $time = $1;
      if(not defined $latest or $latest < $time){
        $latest = $time;
        $latestCache = $cache;
      }
    }
  }
  return $latestCache;
}

sub checkInternet(){
  my $test = `execPing --timeout=2`;
  if($? == 0 and $test =~ /^ok:/){
    return 1;
  }else{
    return 0;
  }
}

sub parseTrains($){
  my $html = shift;

  $html =~ s/%/<!PCT!>/g;
  $html =~ s/<\s*td[^<>]*?\/>/%tdo%%tdc%/g;
  $html =~ s/<\s*td[^<>]*>/%tdo%/g;
  $html =~ s/<\s*\/\s*td[^<>]*>/%tdc%/g;

  $html =~ s/<\s*tr[^<>]*?\/>/%tro%%trc%/g;
  $html =~ s/<\s*tr[^<>]*>/%tro%/g;
  $html =~ s/<\s*\/\s*tr[^<>]*>/%trc%/g;

  my $stuff = "(?:(?:[^%]|\\n)*)";
  my @trainRows = $html =~ /
    %tro%
    (?: $stuff %tdo% $stuff %tdc% $stuff){13}
    %trc%
  /gxsi;

  my $time = "\\d+:\\d+[AP]M";

  my @trains;
  for my $trainRow(@trainRows){
    if($trainRow =~ /^
      $stuff %tro%
      $stuff %tdo% ($time)                      %tdc% #depart time
      $stuff %tdo%   $stuff                     %tdc% #  'to'
      $stuff %tdo% ([a-zA-Z0-9\-_. \t]+)        %tdc% #for
      $stuff %tdo% (\w+|--)?                    %tdc% #track
      $stuff %tdo% ([a-zA-Z0-9\-_. \t]+)        %tdc% #status
      $stuff %tdo% ((?:\*\w+(?:<br\/>)?)*)      %tdc% #xfer at
      $stuff %tdo% ((?:$time(?:<br\/>)?)*)      %tdc% #xfer departs
      $stuff %tdo%   $stuff                     %tdc% #  'to'
      $stuff %tdo% ((?:\w+(?:<br\/>)?)*)        %tdc% #xfer to
      $stuff %tdo% ($time)                      %tdc% #arrives time
      $stuff %tdo% (\d+\ mins\.)                %tdc% #duration
      $stuff %tdo% $stuff(Off\ Peak|Peak)$stuff %tdc% #peak
      $stuff %tdo% ($stuff)                     %tdc% #info
      $stuff %trc%
    $/x){
      push @trains, {
        departs => $1,
        for => $2,
        track => $3,
        status => $4,
        xferAt => $5,
        xferDeparts => $6,
        xferArrives => $7,
        arrives => $8,
        duration => $9,
        info => $10,
      };
    }else{
      print STDERR "malformed train: $trainRow\n";
    }
  }
  if(@trains == 0){
    print STDERR "\n\nWARN: error parsing trains\n";
  }
  return @trains;
}

sub formatTrain($){
  my $train = shift;
  my $track = $$train{track};
  $track = '' if not defined $track;
  $track =~ s/\W+//g;
  $track = "t$track" if $track =~ /\w+/;
  my $status = $$train{status};
  $status = '' if not defined $status;
  $status =~ s/[^a-zA-Z0-9_\- ]+//g;
  $status =~ s/on\s*time/OT/i;
  $status =~ s/left\s*station/LEFT/i;
  my $dur = $$train{duration};
  $dur = "$1m" if $dur =~ /(\d+) min/;
  my $xfers = $$train{xferAt};
  $xfers =~ s/<[^<>]*>/ /g;
  $xfers =~ s/\s+/ /g;
  $xfers =~ s/\s*\*\s*/=>/g;
  return "$$train{departs} $track $status $dur $xfers";
}

sub getStations(){
  return {
    NYK => "Penn Station",
    ATL => "Atlantic Term Bklyn",
    ABT => "Albertson",
    AGT => "Amagansett",
    AVL => "Amityville",
    ADL => "Auburndale",
    BTA => "Babylon",
    BWN => "Baldwin",
    BSR => "Bay Shore",
    BSD => "Bayside",
    BRT => "Belmont Race Track",
    BMR => "Bellmore",
    BPT => "Bellport",
    BRS => "Bellerose",
    BPG => "Bethpage",
    BWD => "Brentwood",
    BHN => "Bridgehampton",
    BDY => "Broadway",
    CPL => "Carle Place",
    CHT => "Cedarhurst",
    CAV => "Centre Avenue",
    CI  => "Central Islip",
    CSH => "Cold Spring Harbor",
    CPG => "Copiague",
    CLP => "Country Life Press",
    DPK => "Deer Park",
    DGL => "Douglaston",
    EHN => "East Hampton",
    ENY => "East New York",
    ERY => "East Rockaway",
    EWN => "East Williston",
    FRY => "Far Rockaway",
    FMD => "Farmingdale",
    ATL => "Flatbush Avenue",
    FPK => "Floral Park",
    FLS => "Flushing",
    FHL => "Forest Hills",
    FPT => "Freeport",
    GCY => "Garden City",
    GBN => "Gibson",
    GCV => "Glen Cove",
    GHD => "Glen Head",
    GST => "Glen Street",
    GNK => "Great Neck",
    GRV => "Great River",
    GWN => "Greenlawn",
    GPT => "Greenport",
    GVL => "Greenvale",
    HBY => "Hampton Bays",
    HGN => "Hempstead Gardens",
    HEM => "Hempstead",
    HWT => "Hewlett",
    HVL => "Hicksville",
    HOL => "Hollis",
    HPA => "Hunterspoint Ave.",
    HUN => "Huntington",
    IWD => "Inwood",
    IPK => "Island Park",
    ISP => "Islip",
    JAM => "Jamaica",
    KGN => "Kew Gardens",
    KPK => "Kings Park",
    LVW => "Lakeview",
    LTN => "Laurelton",
    LCE => "Lawrence",
    LHT => "Lindenhurst",
    LNK => "Little Neck",
    LMR => "Locust Manor",
    LVL => "Locust Valley",
    LBH => "Long Beach",
    LIC => "Long Island City",
    LYN => "Lynbrook",
    MVN => "Malverne",
    MHT => "Manhasset",
    MPK => "Massapequa Park",
    MQA => "Massapequa",
    MSY => "Mastic Shirley",
    MAK => "Mattituck",
    MFD => "Medford",
    MAV => "Merillon Avenue",
    MRK => "Merrick",
    SSM => "Mets-Willets Point",
    MIN => "Mineola",
    MTK => "Montauk",
    MHL => "Murray Hill",
    NBD => "Nassau Blvd",
    NHP => "New Hyde Park",
    NYK => "New York",
    NPT => "Northport",
    NAV => "Nostrand Ave.",
    ODL => "Oakdale",
    ODE => "Oceanside",
    OBY => "Oyster Bay",
    PD  => "Patchogue",
    NYK => "Penn Station",
    PLN => "Pinelawn",
    PDM => "Plandome",
    PJN => "Port Jefferson",
    PWS => "Port Washington",
    QVG => "Queens Village",
    RHD => "Riverhead",
    RVC => "Rockville Centre",
    RON => "Ronkonkoma",
    ROS => "Rosedale",
    RSN => "Roslyn",
    SVL => "Sayville",
    SCF => "Sea Cliff",
    SFD => "Seaford",
    STN => "Smithtown",
    SHN => "Southampton",
    SHD => "Southold",
    SPK => "Speonk",
    SAB => "St. Albans",
    SJM => "St. James",
    SMR => "Stewart Manor",
    BK  => "Stony Brook",
    SYT => "Syosset",
    VSM => "Valley Stream",
    WGH => "Wantagh",
    WHN => "Westhampton",
    WHD => "West Hempstead",
    WBY => "Westbury",
    WWD => "Westwood",
    WMR => "Woodmere",
    WDD => "Woodside",
    WYD => "Wyandanch",
    YPK => "Yaphank",
  };
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
