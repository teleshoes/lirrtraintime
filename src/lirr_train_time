#!/usr/bin/perl
use strict;
use warnings;
use JSON;
use Time::HiRes qw(time);

sub getScheduleText($$$$$);
sub getLatestCache($$);
sub checkInternet();
sub formatTrip($);
sub getStations();
sub nowMillis();
sub run(@);

my $stations = getStations();

my $synonyms = {
  BTA => ["bab", "baby", "babylon", "bbn"],
  NYK => ["penn", "pen", "nyp"],
  CPG => ["cpge", "copiague"],
  FMD => ["farm", "fmdl", "fdl", "farmingdale"],
};

my $cacheDir = "$ENV{HOME}/.cache/lirr_train_time";
my $baseUrl = "https://backend-unified.mylirr.org/plan";
my $okStations = join '', map {  "$_ => $$stations{$_}\n"} sort keys %$stations;

my @HEADERS = (
  "-H", "Accept-Encoding: gzip",
  "-H", "accept-version: 3.0",
);

my $usage = "
  Usage: $0 [OPTS] FROM TO [DATE TIME]
    fetch schedule from $baseUrl, parse it, and show it

  STATIONS:\n$okStations

  $0 --file=FILE
    use FILE instead of fetching from $baseUrl

  OPTS:
    -b|--bigtext|--qtbigtext
      show using bigtext

  DATE:
    the date, formatted as YYYYMMDD, or 'today', or 'tomorrow'
    can also be 'next', which is either today or tomorrow depending on TIME

  TIME:
    the time, formatted as HH24:MM
    if TIME is after the current time and DATE is 'next',
      'today' is used for DATE
    if TIME is before the current time and DATE is 'next',
      'tomorrow' is used for DATE

  e.g.:
      $0 NYK BTA next 17:00
        if run at noon on April 3rd, show trains for later that same afternoon
        if run at 8pm on April 3rd, show trains for April 4th
      $0 NYK BTA 20150403 05:00
        always show early morning trains for April 3rd
";

sub main(@){
  my $file;
  my $bigtext = 0;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^--file=(.+)$/){
      $file = $1;
    }elsif($arg =~ /^(-b|--bigtext|--qtbigtext)$/){
      $bigtext = 1;
    }else{
      die "$usage\nunknown option $arg\n";
    }
  }

  my ($from, $to, $date, $time);
  if(defined $file){
    die $usage if @_ != 0;
  }else{
    die $usage if @_ != 2 and @_ != 4;

    my ($fromSyn, $toSyn, $dateArg, $timeArg) = @_;
    for my $station(keys %$synonyms){
      my %syns = map {lc $_ => 1} @{$$synonyms{$station}};
      $from = $station if not defined $from and defined $syns{lc $fromSyn};
      $to = $station if not defined $to and defined $syns{lc $toSyn};
    }
    $from = uc $fromSyn if not defined $from;
    $to = uc $toSyn if not defined $to;
    die "Invalid starting station: $from\n" if not defined $$stations{$from};
    die "Invalid ending station: $to\n" if not defined $$stations{$to};

    if(defined $dateArg and $dateArg =~ /^(next|today|tomorrow)$/){
      my $hrMin = "$1$2" if $timeArg =~ /^(\d\d):(\d\d)$/;
      my @lt = localtime(time);
      my @ltTmrw = localtime(time + 24*60*60);
      my $curHrMin = sprintf "%02d%02d", $lt[2], $lt[1];
      my $today = sprintf "%04d%02d%02d", $lt[5]+1900, $lt[4]+1, $lt[3];
      my $tmrw = sprintf "%04d%02d%02d", $ltTmrw[5]+1900, $ltTmrw[4]+1, $ltTmrw[3];
      if($dateArg eq "next"){
        if($hrMin < $curHrMin){
          $dateArg = "tomorrow";
          print "using $dateArg for next $timeArg\n";
        }else{
          $dateArg = "today";
          print "using $dateArg for next $timeArg\n";
        }
      }
      $dateArg = $tmrw if $dateArg eq "tomorrow";
      $dateArg = $today if $dateArg eq "today";
      print "date => $dateArg\n";
    }
    $date = $dateArg;
    $time = $timeArg;
  }


  if($bigtext){
    my $schedule;
    my $pid = fork;
    if($pid == 0){
      $schedule = getScheduleText($from, $to, $date, $time, $file);
      my $sep = "\n" . ("-"x30) . "\n";
      print $sep . $schedule . $sep;

      system "bigtext", "--ensure-dbus";
      system "bigtext", $schedule;
      exit 0;
    }else{
      system "bigtext", "-k";
      exec "bigtext", "--lineSeparator=true", "--wait", "loading";
    }
  }else{
    my $schedule = getScheduleText $from, $to, $date, $time, $file;
    my $sep = "\n" . ("-"x30) . "\n";
    print $sep . $schedule . $sep;
  }
}

sub getScheduleText($$$$$){
  my ($from, $to, $date, $time, $file) = @_;

  my ($y, $m, $d, $hr, $min, $ampm);

  my $millis;
  if(defined $date or defined $time){
    if($date !~ /^(\d{4})(\d{2})(\d{2})$/){
      die "Invalid date: $date\n";
    }
    ($y, $m, $d) = ($1, $2, $3);

    if($time !~ /^(\d{2}):(\d{2})$/){
      die "Invalid time: $time\n";
    }
    ($hr, $min) = ($1, $2);

    my $epoch = `date --date='${y}-${m}-${d}T${hr}:${min}' +%s`;
    chomp $epoch;
    $millis = "${epoch}000";
  }else{
    $millis = nowMillis();
  }

  my $fileName;
  my $isCached = 0;
  if(defined $file){
    $fileName = $file;
  }else{
    my $url = "$baseUrl?from=$from&to=$to&fares=ALL&time=$millis&arrive_by=false";

    run "mkdir", "-p", $cacheDir;

    if(checkInternet()){
      $fileName = "$cacheDir/${from}_${to}_" . time . ".json";
      run "curl", $url, @HEADERS, "-o", "$fileName.gz";
      run "gunzip $fileName.gz";
      if(not -e $fileName){
        die "ERROR: gunzip of $fileName.gz failed\n";
      }
    }else{
      $fileName = getLatestCache($from, $to);
      $isCached = 1;
    }
  }

  my $schedule;
  if(defined $fileName and -f $fileName){
    my $json = `cat $fileName`;
    my $obj = eval { from_json($json); };
    if(defined $obj){
      my @trips = @{$$obj{trips}};
      if(@trips == 0){
        $schedule = "no trains";
      }else{
        $schedule = join "\n", (map {formatTrip($_)} @trips);
      }
    }else{
      $schedule = "error";
    }

    if($isCached){
      my $then = $1 if $fileName =~ /${from}_${to}_(\d+)\.json$/;
      my $thenFmt = `date --date=\@$then '+%F %I:%M:%S %p'`;
      chomp $thenFmt;
      $schedule = "as of $thenFmt\n\n$schedule";
    }
  }else{
    $schedule = "FAILURE: could not check schedule";
  }

  my $msg;
  if(defined $date){
    my $now = `date +'%Y-%m-%d %I:%M %p'`;
    chomp $now;
    my $epoch = int($millis/1000.0 + 0.5);
    my $then = `date --date=\@$epoch +'%Y-%m-%d %I:%M %p'`;
    chomp $then;
    $msg = "$from=>$to for: $then\n  {now: $now}\n";
  }else{
    $msg = "$from=>$to\n";
  }
  if($isCached){
    $msg = "!OUTDATED!\n$msg";
  }
  $schedule = "$msg$schedule";

  return $schedule;
}

sub getLatestCache($$){
  my ($from, $to) = @_;
  my @caches = `ls $cacheDir/${from}_${to}_*.json 2>/dev/null`;
  my $latest = undef;
  my $latestCache = undef;
  for my $cache(@caches){
    chomp $cache;
    if($cache =~ /${from}_${to}_(\d+)\.json$/){
      my $time = $1;
      if(not defined $latest or $latest < $time){
        $latest = $time;
        $latestCache = $cache;
      }
    }
  }
  return $latestCache;
}

sub checkInternet(){
  my $test = `execPing --timeout=2`;
  if($? == 0 and $test =~ /^ok:/){
    return 1;
  }else{
    return 0;
  }
}

sub formatTrip($){
  my ($trip) = shift;
  my $start = $$trip{trip_start};
  my $end = $$trip{trip_end};
  my @legs = @{$$trip{legs}};
  my $firstLeg = $legs[0];
  my @firstLegStops = @{$$firstLeg{train}{details}{stops}};
  my $firstStop = $firstLegStops[0];

  my $track;
  my $signTrack = $$firstStop{sign_track};
  my $avpsTrack = $$firstStop{avps_track};
  my $trackPosted = $$firstStop{posted};

  if(defined $signTrack or defined $avpsTrack){
    if($signTrack eq $avpsTrack){
      $track = $signTrack;
    }else{
      $track = "$signTrack/$avpsTrack";
    }
    if($trackPosted !~ /true/i){
      $track .= "?";
    }
  }else{
    $track = "   ";
  }

  my $xfers = "";
  for(my $i=1; $i<@legs; $i++){
    my $leg = $legs[$i];
    my $board = $$leg{board};
    my $name = defined $$stations{$board} ? $$stations{$board} : $board;
    $xfers .= "=>$name";
  }

  my $isPeak = $$trip{peak_code} =~ /A/i ? 1 : 0;

  my @statusItems;
  push @statusItems, "CANCELED" if $$firstLeg{train}{status}{canceled} =~ /true/i;
  push @statusItems, "HELD" if $$firstLeg{train}{status}{held} =~ /true/i;
  my $status = "@statusItems";

  my $dur = $end - $start;
  my $durFmt = int($dur/60 + 0.5) . "m";

  my $startFmt = `date --date=\@$start +%I:%M%p`;
  chomp $startFmt;

  return "$startFmt $track $status $durFmt $xfers";
}

sub getStations(){
  return {
    NYK => "Penn Station",
    ATL => "Atlantic Term Bklyn",
    ABT => "Albertson",
    AGT => "Amagansett",
    AVL => "Amityville",
    ADL => "Auburndale",
    BTA => "Babylon",
    BWN => "Baldwin",
    BSR => "Bay Shore",
    BSD => "Bayside",
    BRT => "Belmont Race Track",
    BMR => "Bellmore",
    BPT => "Bellport",
    BRS => "Bellerose",
    BPG => "Bethpage",
    BWD => "Brentwood",
    BHN => "Bridgehampton",
    BDY => "Broadway",
    CPL => "Carle Place",
    CHT => "Cedarhurst",
    CAV => "Centre Avenue",
    CI  => "Central Islip",
    CSH => "Cold Spring Harbor",
    CPG => "Copiague",
    CLP => "Country Life Press",
    DPK => "Deer Park",
    DGL => "Douglaston",
    EHN => "East Hampton",
    ENY => "East New York",
    ERY => "East Rockaway",
    EWN => "East Williston",
    FRY => "Far Rockaway",
    FMD => "Farmingdale",
    ATL => "Flatbush Avenue",
    FPK => "Floral Park",
    FLS => "Flushing",
    FHL => "Forest Hills",
    FPT => "Freeport",
    GCY => "Garden City",
    GBN => "Gibson",
    GCV => "Glen Cove",
    GHD => "Glen Head",
    GST => "Glen Street",
    GNK => "Great Neck",
    GRV => "Great River",
    GWN => "Greenlawn",
    GPT => "Greenport",
    GVL => "Greenvale",
    HBY => "Hampton Bays",
    HGN => "Hempstead Gardens",
    HEM => "Hempstead",
    HWT => "Hewlett",
    HVL => "Hicksville",
    HOL => "Hollis",
    HPA => "Hunterspoint Ave.",
    HUN => "Huntington",
    IWD => "Inwood",
    IPK => "Island Park",
    ISP => "Islip",
    JAM => "Jamaica",
    KGN => "Kew Gardens",
    KPK => "Kings Park",
    LVW => "Lakeview",
    LTN => "Laurelton",
    LCE => "Lawrence",
    LHT => "Lindenhurst",
    LNK => "Little Neck",
    LMR => "Locust Manor",
    LVL => "Locust Valley",
    LBH => "Long Beach",
    LIC => "Long Island City",
    LYN => "Lynbrook",
    MVN => "Malverne",
    MHT => "Manhasset",
    MPK => "Massapequa Park",
    MQA => "Massapequa",
    MSY => "Mastic Shirley",
    MAK => "Mattituck",
    MFD => "Medford",
    MAV => "Merillon Avenue",
    MRK => "Merrick",
    SSM => "Mets-Willets Point",
    MIN => "Mineola",
    MTK => "Montauk",
    MHL => "Murray Hill",
    NBD => "Nassau Blvd",
    NHP => "New Hyde Park",
    NYK => "New York",
    NPT => "Northport",
    NAV => "Nostrand Ave.",
    ODL => "Oakdale",
    ODE => "Oceanside",
    OBY => "Oyster Bay",
    PD  => "Patchogue",
    NYK => "Penn Station",
    PLN => "Pinelawn",
    PDM => "Plandome",
    PJN => "Port Jefferson",
    PWS => "Port Washington",
    QVG => "Queens Village",
    RHD => "Riverhead",
    RVC => "Rockville Centre",
    RON => "Ronkonkoma",
    ROS => "Rosedale",
    RSN => "Roslyn",
    SVL => "Sayville",
    SCF => "Sea Cliff",
    SFD => "Seaford",
    STN => "Smithtown",
    SHN => "Southampton",
    SHD => "Southold",
    SPK => "Speonk",
    SAB => "St. Albans",
    SJM => "St. James",
    SMR => "Stewart Manor",
    BK  => "Stony Brook",
    SYT => "Syosset",
    VSM => "Valley Stream",
    WGH => "Wantagh",
    WHN => "Westhampton",
    WHD => "West Hempstead",
    WBY => "Westbury",
    WWD => "Westwood",
    WMR => "Woodmere",
    WDD => "Woodside",
    WYD => "Wyandanch",
    YPK => "Yaphank",
  };
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

sub run(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
